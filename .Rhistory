load("C:/Users/Kainos/Downloads/gss.Rdata")
gss.Rdata
gss = load("C:/Users/Kainos/Downloads/gss.Rdata")
gss
names(gss)
load("C:/Users/Kainos/Downloads/gss.Rdata")
dim(gss)
names(gss)
load("C:/Users/Kainos/Downloads/gss.Rdata")
names(gss)
summary(gss$race)
barplot(gss$race)
barplot(gss$race)
table(gss$race)
barplot=table(gss$race)
barplot
x=barplot(gss$race)
dim[childs]
dim[gss$childs]
dim(gss$childs)
table(gss$childs)
exit
quit
load("C:/Users/Kainos/Downloads/gss.Rdata")
names(gss)
summary(gss)
echo "hello world"
echo hello world
cls
clear
hw1_data <- read.csv("C:/Users/Kainos/Desktop/Coursera files/hw1_data.csv")
View(hw1_data)
colname(hw1_data)
dim(hw1_data)
is.na(hw1_data$ozone)
is.na($ozone)
is.na(ozone)
is.nan(hw1_data$ozone)
is.nan( ,1)
is.na( ,1)
is.na(hw1_data( ,1))
as.numericaL()
as.numericaL()
as.numericaL(hw1_data)
hw1_data$ozone
load (hw1_data)
cls
clear
x<- hw1_data
bad<- is.na(x)
x[!bad]
x<- hw1_data$ozone
x<- hw1_data( , 1)
x<- hw1_data[ , 1]
y<- is.na [x]
y<- is.na (x)
mean(!y)
mean(!(is.na(x)))
View(bad)
dim(hw1_data)
dim$true(hw1_data)
library(lattice)
library(lattice)
# Reading in the already unzipped csv file
fileStr <- "./outcome-of-care-measures.csv"
retDfr <- read.csv(fileStr, colClasses = "character")
# the rank functions
rankall <- function(outcomeChr, rankObj = "best") {
# --- Init loading outcome data
outcomeDfr <- Init(fileStr)
}
fileStr
retDfr
ls()
rankall
library(lattice)
# Reading in the already unzipped csv file
fileStr <- "./outcome-of-care-measures.csv"
retDfr <- read.csv(fileStr, colClasses = "character")
# the rank functions
rankall <- function(outcomeChr, rankObj = "best") {
# --- Init loading outcome data
outcomeDfr <- Init(fileStr)
# --- Coerce character into numeric
suppressWarnings(outcomeDfr[, 11] <- as.numeric(outcomeDfr[, 11]))
suppressWarnings(outcomeDfr[, 17] <- as.numeric(outcomeDfr[, 17]))
suppressWarnings(outcomeDfr[, 23] <- as.numeric(outcomeDfr[, 23]))
# --- Create a data frame of freq by state Remove row.names
tableDfr <- data.frame(State = names(tapply(outcomeDfr$State, outcomeDfr$State,
length)), Freq = tapply(outcomeDfr$State, outcomeDfr$State, length))
rownames(tableDfr) <- NULL
# --- Create a data frame of possible inputs and respective columns
inputDfr <- data.frame(Outcome = c("heart attack", "heart failure", "pneumonia"),
Col = c(11, 17, 23))
# --- Check that outcome is valid
if (nrow(inputDfr[inputDfr$Outcome == outcomeChr, ]) == 0)
stop("invalid outcome")
# Assert create an empty vector Add column rank for debug
nameChr <- character(0)
# rankChr <- character(0)
# Return hospital name in that state with the ranked THIRTY(30)-day death rate
# Create a data frame with given ONE (1) state Determine the
# relevant column Reorder the new data frame from best to worst
for (stateChr in tableDfr$State) {
stateDfr <- outcomeDfr[outcomeDfr$State == stateChr, ]
colNum <- inputDfr[inputDfr$Outcome == outcomeChr, 2]
stateDfr <- stateDfr[complete.cases(stateDfr[, colNum]), ]
stateDfr <- stateDfr[order(stateDfr[, colNum], stateDfr$Hospital.Name),
]
# --- Convert 'best' and 'worst' to numeric Determine the relevant row
if (rankObj == "best")
rankNum <- 1 else if (rankObj == "worst")
rankNum <- nrow(stateDfr) else suppressWarnings(rankNum <- as.numeric(rankObj))
# --- Append hospital name to character vector
nameChr <- c(nameChr, stateDfr[rankNum, ]$Hospital.Name)
# rankChr <- c( rankChr, rankNum )
}
# --- Return value is a data frame (hospital, state)
return(data.frame(hospital = nameChr, state = tableDfr$State))
}
best ("BB", "heart attack")
source ("best.R")
if (nrow(inputDfr[inputDfr$Outcome == outcomeChr, ]) == 0)
stop("invalid outcome")
library(lattice)
# Reading in the already unzipped csv file
fileStr <- "./outcome-of-care-measures.csv"
retDfr <- read.csv(fileStr, colClasses = "character")
# the rank functions
rankall <- function(outcomeChr, rankObj = "best") {
# --- Init loading outcome data
outcomeDfr <- Init(fileStr)
# --- Coerce character into numeric
suppressWarnings(outcomeDfr[, 11] <- as.numeric(outcomeDfr[, 11]))
suppressWarnings(outcomeDfr[, 17] <- as.numeric(outcomeDfr[, 17]))
suppressWarnings(outcomeDfr[, 23] <- as.numeric(outcomeDfr[, 23]))
# --- Create a data frame of freq by state Remove row.names
tableDfr <- data.frame(State = names(tapply(outcomeDfr$State, outcomeDfr$State,
length)), Freq = tapply(outcomeDfr$State, outcomeDfr$State, length))
rownames(tableDfr) <- NULL
# --- Create a data frame of possible inputs and respective columns
inputDfr <- data.frame(Outcome = c("heart attack", "heart failure", "pneumonia"),
Col = c(11, 17, 23))
# --- Check that outcome is valid
if (nrow(inputDfr[inputDfr$Outcome == outcomeChr, ]) == 0)
stop("invalid outcome")
# Assert create an empty vector Add column rank for debug
nameChr <- character(0)
# rankChr <- character(0)
# Return hospital name in that state with the ranked THIRTY(30)-day death rate
# Create a data frame with given ONE (1) state Determine the
# relevant column Reorder the new data frame from best to worst
for (stateChr in tableDfr$State) {
stateDfr <- outcomeDfr[outcomeDfr$State == stateChr, ]
colNum <- inputDfr[inputDfr$Outcome == outcomeChr, 2]
stateDfr <- stateDfr[complete.cases(stateDfr[, colNum]), ]
stateDfr <- stateDfr[order(stateDfr[, colNum], stateDfr$Hospital.Name),
]
# --- Convert 'best' and 'worst' to numeric Determine the relevant row
if (rankObj == "best")
rankNum <- 1 else if (rankObj == "worst")
rankNum <- nrow(stateDfr) else suppressWarnings(rankNum <- as.numeric(rankObj))
# --- Append hospital name to character vector
nameChr <- c(nameChr, stateDfr[rankNum, ]$Hospital.Name)
# rankChr <- c( rankChr, rankNum )
}
# --- Return value is a data frame (hospital, state)
return(data.frame(hospital = nameChr, state = tableDfr$State))
}
rankhospital <- function(stateChr, outcomeChr, rankObj) {
# --- Init loading outcome data
outcomeDfr <- Init("./outcome-of-care-measures.csv")
# --- Coerce character into numeric
suppressWarnings(outcomeDfr[, 11] <- as.numeric(outcomeDfr[, 11]))
suppressWarnings(outcomeDfr[, 17] <- as.numeric(outcomeDfr[, 17]))
suppressWarnings(outcomeDfr[, 23] <- as.numeric(outcomeDfr[, 23]))
# --- Create a data frame of freq by state Remove row.names
tableDfr <- data.frame(State = names(tapply(outcomeDfr$State, outcomeDfr$State,
length)), Freq = tapply(outcomeDfr$State, outcomeDfr$State, length))
rownames(tableDfr) <- NULL
# --- Create a data frame of possible inputs and respective columns
inputDfr <- data.frame(Outcome = c("heart attack", "heart failure", "pneumonia"),
Col = c(11, 17, 23))
# --- Check that state and outcome are valid
if (nrow(tableDfr[tableDfr$State == stateChr, ]) == 0)
stop("invalid state")
if (nrow(inputDfr[inputDfr$Outcome == outcomeChr, ]) == 0)
stop("invalid outcome")
# --- Return hospital name in that state with the ranked THIRTY(30)-day
# death rate Create a data frame with given ONE (1) state Determine the
# relevant column Reorder the new data frame from best to worst
stateDfr <- outcomeDfr[outcomeDfr$State == stateChr, ]
colNum <- inputDfr[inputDfr$Outcome == outcomeChr, 2]
stateDfr <- stateDfr[complete.cases(stateDfr[, colNum]), ]
stateDfr <- stateDfr[order(stateDfr[, colNum], stateDfr$Hospital.Name),
]
# --- Convert 'best' and 'worst' to numeric 'Worst' code is not valid if
# omit NA from results Determine the relevant row
if (rankObj == "best")
rankObj <- 1
if (rankObj == "worst")
rankObj <- nrow(stateDfr)
# if( rankObj=='worst' ) rankObj <- tableDfr[tableDfr$State==stateChr, 2]
suppressWarnings(rankNum <- as.numeric(rankObj))
# --- Return value is a character Return data frame for debug
return(stateDfr[rankNum, ]$Hospital.Name)
# return(stateDfr)
}
best <- function(stateChr, outcomeChr) {
# --- Init loading outcome data
outcomeDfr <- Init("./outcome-of-care-measures.csv")
# --- Coerce character into numeric
suppressWarnings(outcomeDfr[, 11] <- as.numeric(outcomeDfr[, 11]))
suppressWarnings(outcomeDfr[, 17] <- as.numeric(outcomeDfr[, 17]))
suppressWarnings(outcomeDfr[, 23] <- as.numeric(outcomeDfr[, 23]))
# --- Create a data frame of freq by state Remove row.names
tableDfr <- data.frame(State = names(tapply(outcomeDfr$State, outcomeDfr$State,
length)), Freq = tapply(outcomeDfr$State, outcomeDfr$State, length))
rownames(tableDfr) <- NULL
# --- Create a data frame of possible inputs and respective columns
inputDfr <- data.frame(Outcome = c("heart attack", "heart failure", "pneumonia"),
Col = c(11, 17, 23))
# --- Check that state and outcome are valid
if (nrow(tableDfr[tableDfr$State == stateChr, ]) == 0)
stop("invalid state")
if (nrow(inputDfr[inputDfr$Outcome == outcomeChr, ]) == 0)
stop("invalid outcome")
# --- Return hospital name in that state with lowest THIRTY(30)-day death
# rate Create a data frame with given ONE (1) state Determine the relevant
# row and column
stateDfr <- outcomeDfr[outcomeDfr$State == stateChr, ]
colNum <- inputDfr[inputDfr$Outcome == outcomeChr, 2]
rowNum <- which.min(stateDfr[, colNum])
return(stateDfr[rowNum, ]$Hospital.Name)
}
freqVtr <- function(inDfr, orderVtr) {
# --- Assert 'directory' is a character vector of length 1 indicating the
# location of the CSV files.  'threshold' is a numeric vector of length 1
# indicating the number of completely observed observations (on all
# variables) required to compute the correlation between nitrate and
# sulfate; the default is 0.  Return a numeric vector of correlations.
# --- Assert create an empty numeric vector
outVtr <- numeric(0)
for (ord in orderVtr) {
# --- Append numeric vector
outVtr <- c(outVtr, inDfr[inDfr$State == ord, 2])
}
# --- Assert return value is a numeric vector
return(outVtr)
}
submit()
sourcelibrary(lattice)
# Reading in the already unzipped csv file
filedoc <- "./outcome-of-care-measures.csv"
readIn <- read.csv(filedoc, colClasses = "character")
# the rank functions
Rank_function <- function(outcomeChr, rankObj = "best") {
# --- Init loading outcome data
workFile <- Init(filedoc)
# --- Coerce character into numeric
suppressWarnings(workFile[, 11] <- as.numeric(workFile[, 11]))
suppressWarnings(workFile[, 17] <- as.numeric(workFile[, 17]))
suppressWarnings(workFile[, 23] <- as.numeric(workFile[, 23]))
# --- Create a data frame of freq by state Remove row.names
tableXYZ <- data.frame(State = names(tapply(workFile$State, workFile$State,
length)), Freq = tapply(workFile$State, workFile$State, length))
rownames(tableXYZ) <- NULL
# --- Create a data frame of possible inputs and respective columns
inputXYZ <- data.frame(Outcome = c("heart attack", "heart failure", "pneumonia"),
Col = c(11, 17, 23))
# --- Check that outcome is valid
if (nrow(inputXYZ[inputXYZ$Outcome == outcomeChr, ]) == 0)
stop("invalid outcome")
# Assert create an empty vector Add column rank for debug
nameChr <- character(0)
# rankChr <- character(0)
# Return hospital name in that state with the ranked THIRTY(30)-day death rate
# Create a data frame with given ONE (1) state Determine the
# relevant column Reorder the new data frame from best to worst
for (stateChr in tableXYZ$State) {
stateXYZ <- workFile[workFile$State == stateChr, ]
colNum <- inputXYZ[inputXYZ$Outcome == outcomeChr, 2]
stateXYZ <- stateXYZ[complete.cases(stateXYZ[, colNum]), ]
stateXYZ <- stateXYZ[order(stateXYZ[, colNum], stateXYZ$Hospital.Name),
]
# --- Convert 'best' and 'worst' to numeric Determine the relevant row
if (rankObj == "best")
rankNum <- 1 else if (rankObj == "worst")
rankNum <- nrow(stateXYZ) else suppressWarnings(rankNum <- as.numeric(rankObj))
# --- Append hospital name to character vector
nameChr <- c(nameChr, stateXYZ[rankNum, ]$Hospital.Name)
# rankChr <- c( rankChr, rankNum )
}
# --- Return value is a data frame (hospital, state)
return(data.frame(hospital = nameChr, state = tableXYZ$State))
}
rankhospital <- function(stateChr, outcomeChr, rankObj) {
# --- Init loading outcome data
workFile <- Init("./outcome-of-care-measures.csv")
# --- Coerce character into numeric
suppressWarnings(workFile[, 11] <- as.numeric(workFile[, 11]))
suppressWarnings(workFile[, 17] <- as.numeric(workFile[, 17]))
suppressWarnings(workFile[, 23] <- as.numeric(workFile[, 23]))
# --- Create a data frame of freq by state Remove row.names
tableXYZ <- data.frame(State = names(tapply(workFile$State, workFile$State,
length)), Freq = tapply(workFile$State, workFile$State, length))
rownames(tableXYZ) <- NULL
# --- Create a data frame of possible inputs and respective columns
inputXYZ <- data.frame(Outcome = c("heart attack", "heart failure", "pneumonia"),
Col = c(11, 17, 23))
# --- Check that state and outcome are valid
if (nrow(tableXYZ[tableXYZ$State == stateChr, ]) == 0)
stop("invalid state")
if (nrow(inputXYZ[inputXYZ$Outcome == outcomeChr, ]) == 0)
stop("invalid outcome")
# --- Return hospital name in that state with the ranked THIRTY(30)-day
# death rate Create a data frame with given ONE (1) state Determine the
# relevant column Reorder the new data frame from best to worst
stateXYZ <- workFile[workFile$State == stateChr, ]
colNum <- inputXYZ[inputXYZ$Outcome == outcomeChr, 2]
stateXYZ <- stateXYZ[complete.cases(stateXYZ[, colNum]), ]
stateXYZ <- stateXYZ[order(stateXYZ[, colNum], stateXYZ$Hospital.Name),
]
# --- Convert 'best' and 'worst' to numeric 'Worst' code is not valid if
# omit NA from results Determine the relevant row
if (rankObj == "best")
rankObj <- 1
if (rankObj == "worst")
rankObj <- nrow(stateXYZ)
# if( rankObj=='worst' ) rankObj <- tableXYZ[tableXYZ$State==stateChr, 2]
suppressWarnings(rankNum <- as.numeric(rankObj))
# --- Return value is a character Return data frame for debug
return(stateXYZ[rankNum, ]$Hospital.Name)
# return(stateXYZ)
}
best <- function(stateChr, outcomeChr) {
# --- Init loading outcome data
workFile <- Init("./outcome-of-care-measures.csv")
# --- Coerce character into numeric
suppressWarnings(workFile[, 11] <- as.numeric(workFile[, 11]))
suppressWarnings(workFile[, 17] <- as.numeric(workFile[, 17]))
suppressWarnings(workFile[, 23] <- as.numeric(workFile[, 23]))
# --- Create a data frame of freq by state Remove row.names
tableXYZ <- data.frame(State = names(tapply(workFile$State, workFile$State,
length)), Freq = tapply(workFile$State, workFile$State, length))
rownames(tableXYZ) <- NULL
# --- Create a data frame of possible inputs and respective columns
inputXYZ <- data.frame(Outcome = c("heart attack", "heart failure", "pneumonia"),
Col = c(11, 17, 23))
# --- Check that state and outcome are valid
if (nrow(tableXYZ[tableXYZ$State == stateChr, ]) == 0)
stop("invalid state")
if (nrow(inputXYZ[inputXYZ$Outcome == outcomeChr, ]) == 0)
stop("invalid outcome")
# --- Return hospital name in that state with lowest THIRTY(30)-day death
# rate Create a data frame with given ONE (1) state Determine the relevant
# row and column
stateXYZ <- workFile[workFile$State == stateChr, ]
colNum <- inputXYZ[inputXYZ$Outcome == outcomeChr, 2]
rowNum <- which.min(stateXYZ[, colNum])
return(stateXYZ[rowNum, ]$Hospital.Name)
}
freqVtr <- function(inXYZ, orderVtr) {
# --- Assert 'directory' is a character vector of length 1 indicating the
# location of the CSV files.  'threshold' is a numeric vector of length 1
# indicating the number of completely observed observations (on all
# variables) required to compute the correlation between nitrate and
# sulfate; the default is 0.  Return a numeric vector of correlations.
# --- Assert create an empty numeric vector
outVtr <- numeric(0)
for (ord in orderVtr) {
# --- Append numeric vector
outVtr <- c(outVtr, inXYZ[inXYZ$State == ord, 2])
}
# --- Assert return value is a numeric vector
return(outVtr)
}
sourcelibrary(lattice)
# Reading in the already unzipped csv file
filedoc <- "./outcome-of-care-measures.csv"
readIn <- read.csv(filedoc, colClasses = "character")
# the rank functions
Rank_function <- function(outcomeChr, rankObj = "best") {
#Init loading outcome data
workFile <- Init(filedoc)
#Converting character into numeric
suppressWarnings(workFile[, 11] <- as.numeric(workFile[, 11]))
suppressWarnings(workFile[, 17] <- as.numeric(workFile[, 17]))
suppressWarnings(workFile[, 23] <- as.numeric(workFile[, 23]))
#Data frame
tableXYZ <- data.frame(State = names(tapply(workFile$State, workFile$State,
length)), Freq = tapply(workFile$State, workFile$State, length))
rownames(tableXYZ) <- NULL
inputXYZ <- data.frame(Outcome = c("heart attack", "heart failure", "pneumonia"),
Col = c(11, 17, 23))
if (nrow(inputXYZ[inputXYZ$Outcome == outcomeChr, ]) == 0)
stop("invalid outcome")
nameChr <- character(0)
rankChr <- character(0)
for (stateChr in tableXYZ$State) {
stateXYZ <- workFile[workFile$State == stateChr, ]
colNum <- inputXYZ[inputXYZ$Outcome == outcomeChr, 2]
stateXYZ <- stateXYZ[complete.cases(stateXYZ[, colNum]), ]
stateXYZ <- stateXYZ[order(stateXYZ[, colNum], stateXYZ$Hospital.Name),
]
# --- Converting best & worst to numeric
if (rankObj == "best")
rankNum <- 1 else if (rankObj == "worst")
rankNum <- nrow(stateXYZ) else suppressWarnings(rankNum <- as.numeric(rankObj))
nameChr <- c(nameChr, stateXYZ[rankNum, ]$Hospital.Name)
# rankChr <- c( rankChr, rankNum )
}
# --- Return value is a data frame (hospital, state)
return(data.frame(hospital = nameChr, state = tableXYZ$State))
}
rankhospital <- function(stateChr, outcomeChr, rankObj) {
workFile <- Init("./outcome-of-care-measures.csv")
suppressWarnings(workFile[, 11] <- as.numeric(workFile[, 11]))
suppressWarnings(workFile[, 17] <- as.numeric(workFile[, 17]))
suppressWarnings(workFile[, 23] <- as.numeric(workFile[, 23]))
tableXYZ <- data.frame(State = names(tapply(workFile$State, workFile$State,
length)), Freq = tapply(workFile$State, workFile$State, length))
rownames(tableXYZ) <- NULL
inputXYZ <- data.frame(Outcome = c("heart attack", "heart failure", "pneumonia"),
Col = c(11, 17, 23))
if (nrow(tableXYZ[tableXYZ$State == stateChr, ]) == 0)
stop("invalid state")
if (nrow(inputXYZ[inputXYZ$Outcome == outcomeChr, ]) == 0)
stop("invalid outcome")
stateXYZ <- workFile[workFile$State == stateChr, ]
colNum <- inputXYZ[inputXYZ$Outcome == outcomeChr, 2]
stateXYZ <- stateXYZ[complete.cases(stateXYZ[, colNum]), ]
stateXYZ <- stateXYZ[order(stateXYZ[, colNum], stateXYZ$Hospital.Name),
]
if (rankObj == "best")
rankObj <- 1
if (rankObj == "worst")
rankObj <- nrow(stateXYZ)
suppressWarnings(rankNum <- as.numeric(rankObj))
return(stateXYZ[rankNum, ]$Hospital.Name)
}
best <- function(stateChr, outcomeChr) {
workFile <- Init("./outcome-of-care-measures.csv")
suppressWarnings(workFile[, 11] <- as.numeric(workFile[, 11]))
suppressWarnings(workFile[, 17] <- as.numeric(workFile[, 17]))
suppressWarnings(workFile[, 23] <- as.numeric(workFile[, 23]))
tableXYZ <- data.frame(State = names(tapply(workFile$State, workFile$State,
length)), Freq = tapply(workFile$State, workFile$State, length))
rownames(tableXYZ) <- NULL
inputXYZ <- data.frame(Outcome = c("heart attack", "heart failure", "pneumonia"),
Col = c(11, 17, 23))
if (nrow(tableXYZ[tableXYZ$State == stateChr, ]) == 0)
stop("invalid state")
if (nrow(inputXYZ[inputXYZ$Outcome == outcomeChr, ]) == 0)
stop("invalid outcome")
stateXYZ <- workFile[workFile$State == stateChr, ]
colNum <- inputXYZ[inputXYZ$Outcome == outcomeChr, 2]
rowNum <- which.min(stateXYZ[, colNum])
return(stateXYZ[rowNum, ]$Hospital.Name)
}
freqVtr <- function(inXYZ, orderVtr) {
outVtr <- numeric(0)
for (ord in orderVtr) {
outVtr <- c(outVtr, inXYZ[inXYZ$State == ord, 2])
}
return(outVtr)
}
save.image("C:\\Users\\Kainos\\Documents\\seun")
source("submit.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit3()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
q()
---
install.packages(c("ggplot2", "gridExtra", "scales", "gridBase"))
install.packages(grid)
install.packages("grid")
install.packages()
install.packages("")
setwd("~/Coursera files/Reproducible Research/RepData_PeerAssessment1")
